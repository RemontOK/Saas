import { registerUser, loginUser } from '../services/auth'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
export const testErrorHandling = async () => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
  
  const results = []

  // 1. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email
  console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email...')
  try {
    const existingUser = {
      name: '–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'test@example.com', // –ò—Å–ø–æ–ª—å–∑—É–µ–º email, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      password: 'password123',
      company: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      phone: '+7 (999) 123-45-67',
      plan: 'Starter'
    }
    
    const result = await registerUser(existingUser)
    results.push({
      test: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email',
      success: !result.success,
      message: result.error,
      expected: '–¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    })
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' : '‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', result.error)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
  }

  // 2. –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
  try {
    const result = await loginUser({
      email: 'nonexistent@example.com',
      password: 'wrongpassword'
    })
    
    results.push({
      test: '–í—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
      success: !result.success,
      message: result.error,
      expected: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
    })
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' : '‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', result.error)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
  }

  // 3. –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º email
  console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º email...')
  try {
    const result = await loginUser({
      email: 'invalid-email',
      password: 'password123'
    })
    
    results.push({
      test: '–í—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º email',
      success: !result.success,
      message: result.error,
      expected: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
    })
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' : '‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', result.error)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
  }

  // 4. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –ø–∞—Ä–æ–ª–µ–º
  console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å –∫–æ—Ä–æ—Ç–∫–∏–º –ø–∞—Ä–æ–ª–µ–º...')
  try {
    const result = await registerUser({
      name: '–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: `short-password-${Date.now()}@example.com`,
      password: '123', // –ö–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
      company: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      phone: '+7 (999) 123-45-67',
      plan: 'Starter'
    })
    
    results.push({
      test: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º –ø–∞—Ä–æ–ª–µ–º',
      success: !result.success,
      message: result.error,
      expected: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
    })
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result.success ? '‚ùå –û—à–∏–±–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' : '‚úÖ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', result.error)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
  }

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:')
  console.log('==================')
  
  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå'
    console.log(`${index + 1}. ${status} ${result.test}`)
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: "${result.message}"`)
    console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: "${result.expected}"`)
    console.log('')
  })

  const successCount = results.filter(r => r.success).length
  const totalCount = results.length
  
  console.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`)
  
  return {
    success: successCount === totalCount,
    results,
    summary: `${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`
  }
}
