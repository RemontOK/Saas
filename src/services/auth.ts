import { supabase } from '../lib/supabase'
import type { User } from '../lib/supabase'

export interface RegisterData {
  name: string
  email: string
  password: string
  company?: string
  phone?: string
  plan: string
}

export interface LoginData {
  email: string
  password: string
}

export interface AuthResponse {
  success: boolean
  user?: User
  error?: string
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = async (data: RegisterData): Promise<AuthResponse> => {
  try {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: data.email,
      password: data.password,
      options: {
        data: {
          name: data.name,
          company: data.company,
          phone: data.phone,
          plan: data.plan
        }
      }
    })

    if (authError) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Supabase
      if (authError.message.includes('already registered') || 
          authError.message.includes('User already registered') ||
          authError.message.includes('duplicate key') ||
          authError.message.includes('already exists')) {
        return { success: false, error: '–¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }
      }
      
      if (authError.message.includes('Invalid email')) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' }
      }
      
      if (authError.message.includes('Password should be at least')) {
        return { success: false, error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      return { success: false, error: authError.message }
    }

    if (!authData.user) {
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    try {
      await supabase
        .from('users')
        .insert([
          {
            id: authData.user.id,
            email: data.email,
            name: data.name,
            company: data.company,
            phone: data.phone,
            plan: data.plan
          }
        ])
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä
    }
    
    const user: User = {
      id: authData.user.id,
      email: data.email,
      name: data.name,
      company: data.company,
      phone: data.phone,
      plan: data.plan,
      created_at: new Date().toISOString()
    }
    
    return { success: true, user }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' }
  }
}

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = async (data: LoginData): Promise<AuthResponse> => {
  try {
    console.log('üîë auth.ts: –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ –¥–ª—è:', data.email);
    
    console.log('üì§ auth.ts: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Supabase...');
    
    // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: data.email,
      password: data.password
    });
    
    console.log('üìä auth.ts: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Supabase:', { 
      hasUser: !!authData?.user, 
      hasError: !!authError,
      errorMessage: authError?.message 
    });

    if (authError) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Supabase
      if (authError.message.includes('Invalid login credentials') ||
          authError.message.includes('Invalid email or password') ||
          authError.message.includes('Invalid credentials') ||
          authError.message.includes('User not found')) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }
      }
      
      if (authError.message.includes('Too many requests')) {
        return { success: false, error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' }
      }
      
      if (authError.message.includes('Email not confirmed')) {
        return { success: false, error: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É' }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      return { success: false, error: authError.message }
    }

    if (!authData.user) {
      return { success: false, error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    let user: User | null = null
    
    try {
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', authData.user.id)
        .single()

      if (userData && !userError) {
        user = userData
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users, —Å–æ–∑–¥–∞–µ–º –∏–∑ user_metadata
        const metadata = authData.user.user_metadata
        user = {
          id: authData.user.id,
          email: authData.user.email || '',
          name: metadata.name || '',
          company: metadata.company,
          phone: metadata.phone,
          plan: metadata.plan || 'Starter',
          created_at: authData.user.created_at || new Date().toISOString()
        }
      }
    } catch (error) {
      // Fallback –Ω–∞ user_metadata
      const metadata = authData.user.user_metadata
      user = {
        id: authData.user.id,
        email: authData.user.email || '',
        name: metadata.name || '',
        company: metadata.company,
        phone: metadata.phone,
        plan: metadata.plan || 'Starter',
        created_at: authData.user.created_at || new Date().toISOString()
      }
    }

    console.log('‚úÖ auth.ts: –í—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user?.email);
    return { success: true, user: user || undefined }
  } catch (error: any) {
    console.error('üí• auth.ts: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);

    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' }
  }
}

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const logoutUser = async (): Promise<{ success: boolean; error?: string }> => {
  try {
    console.log('üö™ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', user ? user.email : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    // –ü—Ä—è–º–æ–π –≤—ã—Ö–æ–¥ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
    const { error } = await supabase.auth.signOut()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)
      return { success: false, error: error.message }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    const { data: { user: userAfterLogout } } = await supabase.auth.getUser()
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:', userAfterLogout ? userAfterLogout.email : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    return { success: true }
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)

    return { success: false, error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞' }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getCurrentUser = async (): Promise<User | null> => {
  try {
    const { data: { user: authUser } } = await supabase.auth.getUser()
    
    if (!authUser) {
      return null
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const { data: userData } = await supabase
      .from('users')
      .select('*')
      .eq('id', authUser.id)
      .single()

    if (userData) {
      return userData
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ, —Å–æ–∑–¥–∞–µ–º –∏–∑ user_metadata
    const metadata = authUser.user_metadata
    return {
      id: authUser.id,
      email: authUser.email || '',
      name: metadata.name || '',
      company: metadata.company,
      phone: metadata.phone,
      plan: metadata.plan || 'Starter',
      created_at: authUser.created_at || new Date().toISOString()
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return null
  }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const onAuthStateChange = (callback: (user: User | null) => void) => {
  return supabase.auth.onAuthStateChange(async (_event: any, session: any) => {
    if (session?.user) {
      const user = await getCurrentUser()
      callback(user)
    } else {
      callback(null)
    }
  })
}