import { supabase } from '../lib/supabase'
import type { User } from '../lib/supabase'
import { createUserRecord, checkUserExists } from '../utils/create-user-record'

export interface RegisterData {
  name: string
  email: string
  password: string
  company?: string
  phone?: string
  plan: string
}

export interface LoginData {
  email: string
  password: string
}

export interface AuthResponse {
  success: boolean
  user?: User
  error?: string
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const registerUser = async (data: RegisterData): Promise<AuthResponse> => {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.email)
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: data.email,
      password: data.password,
      options: {
        data: {
          name: data.name,
          company: data.company,
          phone: data.phone,
          plan: data.plan
        }
      }
    })

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { authData, authError })

    if (authError) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', authError)
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Supabase
      if (authError.message.includes('already registered') || 
          authError.message.includes('User already registered') ||
          authError.message.includes('duplicate key') ||
          authError.message.includes('already exists')) {
        return { success: false, error: '–¢–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' }
      }
      
      if (authError.message.includes('Invalid email')) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' }
      }
      
      if (authError.message.includes('Password should be at least')) {
        return { success: false, error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      return { success: false, error: authError.message }
    }

    if (!authData.user) {
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä handle_new_user
    try {
      const { error: userError } = await supabase
        .from('users')
        .insert([
          {
            id: authData.user.id,
            email: data.email,
            name: data.name,
            company: data.company,
            phone: data.phone,
            plan: data.plan
          }
        ])

      if (userError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users:', userError.message)
        console.log('–ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä handle_new_user –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏')
      } else {
        console.log('–ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users')
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      console.log('–ü–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä handle_new_user –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
    setTimeout(async () => {
      try {
        const { exists } = await checkUserExists(authData.user.id)
        
        if (exists) {
          console.log('‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä handle_new_user')
        } else {
          console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ users, —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ fallback...')
          
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ fallback —Ñ—É–Ω–∫—Ü–∏—é
          const result = await createUserRecord({
            id: authData.user.id,
            email: data.email,
            name: data.name,
            company: data.company,
            phone: data.phone,
            plan: data.plan
          })
          
          if (result.success) {
            console.log('‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ fallback —Ñ—É–Ω–∫—Ü–∏—é')
          } else if (result.retry) {
            console.log('‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –≤ auth.users, –∂–¥–µ–º –µ—â–µ...')
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
              const retryResult = await createUserRecord({
                id: authData.user.id,
                email: data.email,
                name: data.name,
                company: data.company,
                phone: data.phone,
                plan: data.plan
              })
              
              if (retryResult.success) {
                console.log('‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ')
              } else {
                console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ:', retryResult.error)
              }
            }, 3000)
          } else {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.error)
          }
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      }
    }, 2000) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    
    const user: User = {
      id: authData.user.id,
      email: data.email,
      name: data.name,
      company: data.company,
      phone: data.phone,
      plan: data.plan,
      created_at: new Date().toISOString()
    }
    
    return { success: true, user }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' }
  }
}

// –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const loginUser = async (data: LoginData): Promise<AuthResponse> => {
  try {
    console.log('üîë –ù–∞—á–∏–Ω–∞–µ–º –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.email)
    
    // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    try {
      const { data: testData, error: testError } = await supabase.auth.getUser()
      console.log('üìä –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', { hasData: !!testData, hasError: !!testError, error: testError?.message })
    } catch (testErr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', testErr)
    }
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–∞ –≤ Supabase...')
    
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–∞ –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–∞
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: data.email,
      password: data.password
    })

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', { 
      hasUser: !!authData.user, 
      hasError: !!authError,
      errorMessage: authError?.message,
      userId: authData.user?.id,
      userEmail: authData.user?.email
    })

    if (authError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', authError)
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Supabase
      if (authError.message.includes('Invalid login credentials') ||
          authError.message.includes('Invalid email or password') ||
          authError.message.includes('Invalid credentials') ||
          authError.message.includes('Email not confirmed') ||
          authError.message.includes('User not found')) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' }
      }
      
      if (authError.message.includes('Too many requests')) {
        return { success: false, error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' }
      }
      
      if (authError.message.includes('Email not confirmed')) {
        return { success: false, error: 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É' }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      return { success: false, error: authError.message }
    }

    if (!authData.user) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
      return { success: false, error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' }
    }

    console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    let user: User | null = null
    
    try {
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', authData.user.id)
        .single()

      if (userData && !userError) {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users')
        user = userData
      } else {
        console.log('‚ö†Ô∏è –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_metadata')
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users, —Å–æ–∑–¥–∞–µ–º –∏–∑ user_metadata
        const metadata = authData.user.user_metadata
        user = {
          id: authData.user.id,
          email: authData.user.email || '',
          name: metadata.name || '',
          company: metadata.company,
          phone: metadata.phone,
          plan: metadata.plan || 'Starter',
          created_at: authData.user.created_at || new Date().toISOString()
        }
      }
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      // Fallback –Ω–∞ user_metadata
      const metadata = authData.user.user_metadata
      user = {
        id: authData.user.id,
        email: authData.user.email || '',
        name: metadata.name || '',
        company: metadata.company,
        phone: metadata.phone,
        plan: metadata.plan || 'Starter',
        created_at: authData.user.created_at || new Date().toISOString()
      }
    }

    console.log('üéâ –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:', user?.email)
    return { success: true, user: user || undefined }
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
    return { success: false, error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' }
  }
}

// –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const logoutUser = async (): Promise<{ success: boolean; error?: string }> => {
  try {
    console.log('üö™ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º:', user ? user.email : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è signOut
    const signOutPromise = supabase.auth.signOut()
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')), 5000)
    )
    
    const { error } = await Promise.race([signOutPromise, timeoutPromise]) as any
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)
      return { success: false, error: error.message }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞
    const { data: { user: userAfterLogout } } = await supabase.auth.getUser()
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞:', userAfterLogout ? userAfterLogout.email : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
    return { success: true }
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)
    
    // –ï—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç - –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—Å—Ç–∏—Ç—Å—è
    if (error.message === '–¢–∞–π–º–∞—É—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã') {
      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã—Ö–æ–¥–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è')
      return { success: true, error: '–¢–∞–π–º–∞—É—Ç, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ' }
    }
    
    return { success: false, error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞' }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getCurrentUser = async (): Promise<User | null> => {
  try {
    const { data: { user: authUser } } = await supabase.auth.getUser()
    
    if (!authUser) {
      return null
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const { data: userData } = await supabase
      .from('users')
      .select('*')
      .eq('id', authUser.id)
      .single()

    if (userData) {
      return userData
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ, —Å–æ–∑–¥–∞–µ–º –∏–∑ user_metadata
    const metadata = authUser.user_metadata
    return {
      id: authUser.id,
      email: authUser.email || '',
      name: metadata.name || '',
      company: metadata.company,
      phone: metadata.phone,
      plan: metadata.plan || 'Starter',
      created_at: authUser.created_at || new Date().toISOString()
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return null
  }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const onAuthStateChange = (callback: (user: User | null) => void) => {
  return supabase.auth.onAuthStateChange(async (_event: any, session: any) => {
    if (session?.user) {
      const user = await getCurrentUser()
      callback(user)
    } else {
      callback(null)
    }
  })
}