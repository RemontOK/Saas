import { useState } from 'react'
import { supabase } from '../lib/supabase'

export default function DebugAuth() {
  const [logs, setLogs] = useState<string[]>([])
  const [testEmail] = useState('test@example.com')
  const [testPassword] = useState('testpassword123')

  const addLog = (message: string) => {
    setLogs(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`])
  }

  const testSupabaseConnection = async () => {
    addLog('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...')
    
    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
      const url = supabase.supabaseUrl
      addLog(`üì° URL: ${url}`)
      
      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
      const key = supabase.supabaseKey
      addLog(`üîë –ö–ª—é—á: ${key ? '–ï—Å—Ç—å' : '–ù–µ—Ç'} (–¥–ª–∏–Ω–∞: ${key?.length || 0})`)
      
      // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const { data, error } = await supabase.auth.getUser()
      if (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
      } else {
        addLog(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user?.email || '–ù–µ—Ç'}`)
      }
      
    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`)
    }
  }

  const testRegistration = async () => {
    addLog('üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...')
    
    try {
      const { data, error } = await supabase.auth.signUp({
        email: testEmail,
        password: testPassword,
        options: {
          data: {
            name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            company: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
            phone: '+1234567890',
            plan: 'Starter'
          }
        }
      })
      
      if (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`)
      } else {
        addLog(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user?.email}`)
        addLog(`üìß –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email: ${data.user?.email_confirmed_at ? '–î–∞' : '–ù–µ—Ç'}`)
      }
      
    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`)
    }
  }

  const testLogin = async () => {
    addLog('üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥...')
    
    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email: testEmail,
        password: testPassword
      })
      
      if (error) {
        addLog(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`)
      } else {
        addLog(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user?.email}`)
      }
      
    } catch (error: any) {
      addLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`)
    }
  }

  const clearLogs = () => {
    setLogs([])
  }

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      background: 'rgba(0, 0, 0, 0.9)',
      color: 'white',
      padding: '2rem',
      zIndex: 10000,
      overflow: 'auto'
    }}>
      <div style={{ maxWidth: '800px', margin: '0 auto' }}>
        <h1 style={{ color: '#10b981', marginBottom: '2rem' }}>
          üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        </h1>
        
        <div style={{ display: 'flex', gap: '1rem', marginBottom: '2rem', flexWrap: 'wrap' }}>
          <button 
            onClick={testSupabaseConnection}
            style={{
              background: '#3b82f6',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              fontWeight: '600'
            }}
          >
            üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
          </button>
          
          <button 
            onClick={testRegistration}
            style={{
              background: '#10b981',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              fontWeight: '600'
            }}
          >
            üìù –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          </button>
          
          <button 
            onClick={testLogin}
            style={{
              background: '#f59e0b',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              fontWeight: '600'
            }}
          >
            üîë –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
          </button>
          
          <button 
            onClick={clearLogs}
            style={{
              background: '#ef4444',
              color: 'white',
              border: 'none',
              padding: '0.75rem 1.5rem',
              borderRadius: '8px',
              cursor: 'pointer',
              fontSize: '0.9rem',
              fontWeight: '600'
            }}
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
          </button>
        </div>
        
        <div style={{
          background: '#1f2937',
          padding: '1rem',
          borderRadius: '8px',
          fontFamily: 'monospace',
          fontSize: '0.85rem',
          maxHeight: '400px',
          overflow: 'auto'
        }}>
          {logs.length === 0 ? (
            <div style={{ color: '#9ca3af' }}>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...</div>
          ) : (
            logs.map((log, index) => (
              <div key={index} style={{ marginBottom: '0.5rem' }}>
                {log}
              </div>
            ))
          )}
        </div>
        
        <div style={{ marginTop: '2rem', fontSize: '0.9rem', color: '#9ca3af' }}>
          <p><strong>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong></p>
          <p>Email: {testEmail}</p>
          <p>–ü–∞—Ä–æ–ª—å: {testPassword}</p>
        </div>
      </div>
    </div>
  )
}
